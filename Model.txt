#define MAX 2  

chan user_mobileApps[MAX] = [1] of {byte,mtype,mtype, mtype, byte, mtype}                                  
chan mobileApps_user[MAX] = [1] of {byte,mtype,mtype, mtype, byte, mtype}

mtype = {phoneNumber, secretCode, validAccount,account, invalidAccount, accountLocked, requestLogon
 sendMoney, depositMoney, withdrawallMoney, payService, T_ERROR, T_VALID, T_INVALID, requestR} 

bool Logon;
byte amountDeposit, amountSend, amountWithdrawall, amountPay; 

proctype userApps(chan user_mobileApp; chan mobileApp_user; byte i)
{
request_logon:
   if 
   ::atomic {user_mobileApp?eval(i),phoneNumber,secretCode,requestLogon,0,validAccount->
            Logon = true;
            printf("succes connexion\n");
            goto select_operation
           }

   ::atomic {user_mobileApp?eval(i),phoneNumber,secretCode,requestLogon,0,invalidAccount->
            Logon = false;
            printf("connexion error\n");
            goto request_logon
           }
  ::atomic {user_mobileApp?eval(i),phoneNumber,secretCode,requestLogon,0,accountLocked->
            Logon = false;
            printf("Account locked\n");
            goto request_logon
           }
    fi;

select_operation:
  if
   ::Logon==true->
     printf("choose operation\n");
     if
       ::user_mobileApp!i,phoneNumber,secretCode,sendMoney,amountSend,requestR->
         if
           ::atomic{mobileApp_user?eval(i), phoneNumber, secretCode,sendMoney,0,T_VALID->
             printf("succefull send money transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,sendMoney,0,T_INVALID->
             printf("invalid send money transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber,secretCode,sendMoney,0,T_ERROR->
             printf("error send transaction\n"); 
             goto select_operation
             }
         fi;

       ::user_mobileApp!i,phoneNumber,secretCode,depositMoney,amountDeposit,requestR->
         if
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,depositMoney,0,T_VALID->
             printf("succefull deposit transaction\n"); 
             goto select_operation
             }

           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,depositMoney,0,T_ERROR->
             printf("transaction  deposit error\n"); 
             goto select_operation
             }
         fi;

        ::user_mobileApp!i,phoneNumber,secretCode,withdrawallMoney,amountWithdrawall,requestR->
         if
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,withdrawallMoney,0,T_VALID->
             printf("succefull withdrawll transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,withdrawallMoney,0,T_INVALID->
             printf("invalid  withdrawall transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,withdrawallMoney,0,T_ERROR->
             printf("error withdrawall transaction\n"); 
             goto select_operation
             }
         fi;
     
        ::user_mobileApp!i,phoneNumber,secretCode,payService,amountPay,requestR->
         if
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,payService,0,T_VALID->
             printf("succefull transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,payService,0,T_INVALID->
             printf("invalid transaction\n"); 
             goto select_operation
             }
           ::atomic{mobileApp_user?eval(i),phoneNumber, secretCode,payService,0,T_ERROR->
             printf("transaction error\n"); 
             goto select_operation
             }
         fi;
      fi;   
   ::Logon==false->
    printf("no transaction allowed\n"); 
  fi;
}

init
{
user_mobileApps[1]!1,phoneNumber, secretCode, requestLogon,0,validAccount;
mobileApps_user[1]!1,phoneNumber, secretCode,depositMoney,0,T_VALID;
atomic{
run userApps(user_mobileApps[0], mobileApps_user,1);
run userApps(user_mobileApps[1], mobileApps_user[1],1);
}
}